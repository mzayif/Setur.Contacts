@page "/contacts/{ContactId:guid}/add-communication"

@inject IContactService ContactService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

<PageTitle>ƒ∞leti≈üim Bilgisi Ekle - Setur Contacts</PageTitle>

<div class="container mt-4">
    <div class="row justify-content-center">
        <div class="col-md-8">
            <div class="card">
                <div class="card-header">
                    <h4 class="mb-0">
                        <i class="fas fa-plus me-2"></i>
                        ƒ∞leti≈üim Bilgisi Ekle
                    </h4>
                </div>
                <div class="card-body">
                    @if (contact != null)
                    {
                        <div class="alert alert-info mb-4">
                            <strong>@contact.FirstName @contact.LastName</strong> i√ßin yeni ileti≈üim bilgisi ekliyorsunuz.
                        </div>

                        <EditForm Model="@communicationInfo" OnValidSubmit="HandleValidSubmit">
                            <DataAnnotationsValidator />
                            
                            <div class="row">
                                <div class="col-md-6 mb-3">
                                    <label for="type" class="form-label">ƒ∞leti≈üim T√ºr√º *</label>
                                    <InputSelect id="type" class="form-select" @bind-Value="communicationInfo.Type">
                                        <option value="">Se√ßiniz...</option>
                                        <option value="@CommunicationType.Phone">üìû Telefon</option>
                                        <option value="@CommunicationType.Email">üìß E-posta</option>
                                        <option value="@CommunicationType.Location">üìç Lokasyon</option>
                                    </InputSelect>
                                    <ValidationMessage For="@(() => communicationInfo.Type)" />
                                </div>
                                
                                <div class="col-md-6 mb-3">
                                    <label for="value" class="form-label">Deƒüer *</label>
                                    <InputText id="value" class="form-control" @bind-Value="communicationInfo.Value" />
                                    <ValidationMessage For="@(() => communicationInfo.Value)" />
                                </div>
                            </div>
                            
                            <div class="d-flex justify-content-between">
                                <button type="button" class="btn btn-secondary" @onclick="GoBack">
                                    <i class="fas fa-arrow-left me-2"></i>
                                    Geri
                                </button>
                                
                                <button type="submit" class="btn btn-primary" disabled="@isSubmitting">
                                    @if (isSubmitting)
                                    {
                                        <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                                        <span>Ekleniyor...</span>
                                    }
                                    else
                                    {
                                        <i class="fas fa-save me-2"></i>
                                        <span>Ekle</span>
                                    }
                                </button>
                            </div>
                        </EditForm>
                    }
                    else if (isLoading)
                    {
                        <div class="text-center">
                            <div class="spinner-border" role="status">
                                <span class="visually-hidden">Y√ºkleniyor...</span>
                            </div>
                            <p class="mt-2">Ki≈üi bilgileri y√ºkleniyor...</p>
                        </div>
                    }
                    else
                    {
                        <div class="alert alert-danger">
                            Ki≈üi bulunamadƒ±!
                        </div>
                        <button class="btn btn-secondary" @onclick="GoToContacts">
                            <i class="fas fa-arrow-left me-2"></i>
                            Ki≈üi Listesine D√∂n
                        </button>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public Guid ContactId { get; set; }

    private AddCommunicationInfoRequest communicationInfo = new();
    private ContactDetailResponse? contact;
    private bool isLoading = true;
    private bool isSubmitting = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadContact();
    }

    private async Task LoadContact()
    {
        isLoading = true;
        try
        {
            var result = await ContactService.GetContactByIdAsync(ContactId);
            if (result.Success && result.Data != null)
            {
                contact = result.Data;
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alert", "Ki≈üi bulunamadƒ±!");
                Navigation.NavigateTo("/contacts");
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Ki≈üi y√ºklenirken hata olu≈ütu: {ex.Message}");
            Navigation.NavigateTo("/contacts");
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task HandleValidSubmit()
    {
        isSubmitting = true;
        
        try
        {
            var result = await ContactService.AddCommunicationInfoAsync(ContactId, communicationInfo);
            
            if (result.Success)
            {
                await JSRuntime.InvokeVoidAsync("alert", "ƒ∞leti≈üim bilgisi ba≈üarƒ±yla eklendi!");
                Navigation.NavigateTo($"/contacts/{ContactId}");
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alert", $"Hata: {result.Message}");
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Hata olu≈ütu: {ex.Message}");
        }
        finally
        {
            isSubmitting = false;
        }
    }

    private void GoBack()
    {
        Navigation.NavigateTo($"/contacts/{ContactId}");
    }

    private void GoToContacts()
    {
        Navigation.NavigateTo("/contacts");
    }
}
