@page "/"

@inject IReportStatusService ReportStatusService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

<PageTitle>Setur Contacts - Ana Sayfa</PageTitle>

<div class="container mt-4">
    <div class="row">
        <div class="col-12">
            <div class="text-center">
                <h1 class="display-4 mb-4">üìû Setur Ki≈üi Y√∂netim Sistemi</h1>
                <p class="lead mb-5">Ki≈üi y√∂netimi ve raporlama i≈ülemlerinizi kolayca ger√ßekle≈ütirin</p>
                
                <div class="row justify-content-center">
                    <div class="col-md-8">
                        <div class="card">
                            <div class="card-body">
                                <h5 class="card-title text-center mb-4">Ho≈ü Geldiniz!</h5>
                                <p class="card-text text-center">
                                    Sol men√ºden istediƒüiniz i≈ülemi se√ßerek ba≈ülayabilirsiniz:
                                </p>
                                <ul class="list-unstyled text-center">
                                    <li><i class="fas fa-user-plus text-primary"></i> <strong>Ki≈üi Ekleme:</strong> Yeni ki≈üi bilgileri ekleyin</li>
                                    <li><i class="fas fa-phone text-success"></i> <strong>Ki≈üileri G√∂r√ºnt√ºle:</strong> Mevcut ki≈üileri listeleyin ve d√ºzenleyin</li>
                                    <li><i class="fas fa-chart-bar text-info"></i> <strong>Raporlar:</strong> √áe≈üitli raporlar olu≈üturun</li>
                                </ul>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private bool _isFirstRender = true;

    protected override void OnInitialized()
    {
        // Rapor tamamlandƒ±ƒüƒ±nda bildirim al
        ReportStatusService.ReportCompleted += OnReportCompleted;
        ReportStatusService.ReportFailed += OnReportFailed;
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            _isFirstRender = false;
        }
    }



    private async void OnReportCompleted(ReportResponse report)
    {
        if (!_isFirstRender)
        {
            // JavaScript ile bildirim g√∂ster
            var message = $"Rapor tamamlandƒ±! Rapor ID: {report.Id}";
            await InvokeAsync(async () =>
            {
                await JSRuntime.InvokeVoidAsync("alert", message);
                StateHasChanged();
            });
        }
    }

    private async void OnReportFailed(string errorMessage)
    {
        if (!_isFirstRender)
        {
            // JavaScript ile hata bildirimi g√∂ster
            await InvokeAsync(async () =>
            {
                await JSRuntime.InvokeVoidAsync("alert", $"Hata: {errorMessage}");
                StateHasChanged();
            });
        }
    }

    public void Dispose()
    {
        ReportStatusService.ReportCompleted -= OnReportCompleted;
        ReportStatusService.ReportFailed -= OnReportFailed;
    }
}
