version: '3.8'

services:
  postgres:
    image: postgres:15
    container_name: setur-contacts-postgres
    environment:
      POSTGRES_DB: setur_contacts
      POSTGRES_USER: setur
      POSTGRES_PASSWORD: Setur123!
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: unless-stopped
    networks:
      - setur-network

  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: setur-contacts-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    restart: unless-stopped
    networks:
      - setur-network

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: setur-contacts-kafka
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://kafka:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT_INTERNAL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_DELETE_TOPIC_ENABLE: "true"
    ports:
      - "9092:9092"
      - "29092:29092"
    restart: unless-stopped
    networks:
      - setur-network

  redis:
    image: redis:7-alpine
    container_name: setur-contacts-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - setur-network

  contact-api:
    build:
      context: .
      dockerfile: src/Setur.Contacts.ContactApi/Dockerfile
    container_name: setur-contacts-contact-api
    ports:
      - "5001:8080"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ConnectionStrings__DefaultConnection=Host=postgres;Database=setur_contacts;Username=setur;Password=Setur123!
      - Kafka__BootstrapServers=kafka:29092
      - Redis__ConnectionString=redis:6379
    depends_on:
      - postgres
      - kafka
      - redis
    restart: unless-stopped
    networks:
      - setur-network

  report-api:
    build:
      context: .
      dockerfile: src/Setur.Contacts.ReportApi/Dockerfile
    container_name: setur-contacts-report-api
    ports:
      - "5002:8080"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ConnectionStrings__DefaultConnection=Host=postgres;Database=setur_report;Username=setur;Password=Setur123!
      - Kafka__BootstrapServers=kafka:29092
      - Redis__ConnectionString=redis:6379
      - ContactApi__BaseUrl=http://contact-api:8080
    depends_on:
      - postgres
      - kafka
      - redis
      - contact-api
    restart: unless-stopped
    networks:
      - setur-network

  blazor-app:
    build:
      context: .
      dockerfile: src/Setur.Contacts.BlazorApp/Dockerfile
    container_name: setur-contacts-blazor-app
    ports:
      - "5000:8080"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ContactApi__BaseUrl=http://contact-api:8080
      - ReportApi__BaseUrl=http://report-api:8080
      - SignalR__ReportHubUrl=http://report-api:8080/reportHub
    depends_on:
      - contact-api
      - report-api
    restart: unless-stopped
    networks:
      - setur-network

  kafdrop:
    image: obsidiandynamics/kafdrop:latest
    container_name: setur-contacts-kafdrop
    depends_on:
      - kafka
    ports:
      - "9000:9000"
    environment:
      KAFKA_BROKERCONNECT: kafka:29092
      JVM_OPTS: "-Xms32M -Xmx64M"
      SERVER_SERVLET_CONTEXTPATH: "/"
    restart: unless-stopped
    networks:
      - setur-network

volumes:
  postgres_data:
  redis_data:

networks:
  setur-network:
    driver: bridge
